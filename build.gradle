plugins {
    id 'java-gradle-plugin'
    id 'groovy'

    alias libs.plugins.indra
    alias libs.plugins.indra.gradlePluginPublish
    alias libs.plugins.indra.licenserSpotless
    alias libs.plugins.spotless
    alias libs.plugins.pluginPublishPlugin
}

group = 'ca.stellardrift'
description = 'A Gradle plugin to manage patches for Git repositories'

dependencies {
    testImplementation platform(libs.junit.bom)
    testImplementation libs.mammoth.test
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly libs.junit.launcher
}

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
}

indra {
    javaVersions {
        target 8
        testWith 11, 17, 21
    }
    github("zml2008", "gitpatcher")
    mitLicense()

    publishSnapshotsTo("stellardrift", "https://repo.stellardrift.ca/repository/snapshots/")
    publishReleasesTo("stellardrift", "https://repo.stellardrift.ca/repository/releases/")
    configurePublications {
        pom {
            url = 'https://gitpatcher.stellardrift.ca'
            developers {
                developer {
                    id = "zml"
                    name = "zml"
                    timezone = "America/Vancouver"
                }
            }
            contributors {
                contributor {
                    id = "minecrell"
                    name = "Minecrell"
                    roles = ["Former Maintainer"]
                }
                contributor {
                    id = "forge"
                    name = "MinecraftForge"
                    roles = ["Former Maintainer"]
                }
            }
        }
    }
}

indraSpotlessLicenser {
    licenseHeaderFile file('LICENSE')
}

spotless {
    ratchetFrom 'origin/trunk'
}

tasks.named('javadoc') {
    enabled = false
}

tasks.named('javadocJar', Jar).configure {
    dependsOn 'groovydoc'
    archiveClassifier = 'groovydoc'
    from groovydoc.destinationDir
}

tasks.named('jar', Jar) {
    indraGit.applyVcsInformationToManifest(manifest)
}

validatePlugins {
    ignoreFailures = true
    failOnWarning = false // abstract classes should be ok without annotations?
}

indraPluginPublishing {
    website 'https://gitpatcher.stellardrift.ca'
    plugin(
           "gitpatcher",
            "ca.stellardrift.gitpatcher.GitPatcher",
            "GitPatcher",
            description,
            ["git", "patching"]
    )
}
